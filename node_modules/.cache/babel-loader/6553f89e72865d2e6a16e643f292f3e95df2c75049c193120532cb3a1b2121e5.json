{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u85E4\\u6FA4 \\u826F\\u7950\\\\Downloads\\\\\\u7814\\u4FEE\\\\learning_fujisawa\\\\webapp\\\\game\\\\src\\\\components\\\\SnakeGame\\\\SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useKey } from 'react-use';\nimport SnakeBoard from './SnakeBoard';\nimport { generateFoodPosition, initialSnake, moveSnake } from './utils/utils';\nimport './css/SnakeGame.css';\nimport GameOver from '../GameOver';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = props => {\n  _s();\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState('STOP');\n  const [food, setFood] = useState(generateFoodPosition);\n  const [gameover, setGameOver] = useState(false);\n  const [intervalTime, setIntervalTime] = useState(200);\n  useEffect(() => {\n    const interval = setInterval(() => moveSnake(direction, snake, food, intervalTime, setSnake, setFood, setGameOver, setIntervalTime, setDirection), intervalTime);\n    return () => clearInterval(interval);\n  }, [direction, snake]);\n  const handleKeyPress = newDirection => {\n    setDirection(prevDirection => {\n      if (direction === 'UP' && newDirection === 'DOWN' || direction === 'DOWN' && newDirection === 'UP' || direction === 'LEFT' && newDirection === 'RIGHT' || direction === 'RIGHT' && newDirection === 'LEFT') {\n        // Ignore the key press if it's the opposite direction\n        console.log(newDirection);\n        return prevDirection;\n      }\n      return newDirection;\n    });\n    // setDirection(newDirection);\n  };\n  useKey('ArrowUp', () => handleKeyPress('UP'));\n  useKey('ArrowDown', () => handleKeyPress('DOWN'));\n  useKey('ArrowLeft', () => handleKeyPress('LEFT'));\n  useKey('ArrowRight', () => handleKeyPress('RIGHT'));\n  // useKey('ArrowUp',    () => setDirection('UP'));\n  // useKey('ArrowDown',  () => setDirection('DOWN'));\n  // useKey('ArrowLeft',  () => setDirection('LEFT'));\n  // useKey('ArrowRight', () => setDirection('RIGHT'));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moveSnake\"\n      // tabIndex={0}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: () => props.setGame(\"menu\"),\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"SnakeTitle\",\n          children: \"Snake Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), !gameover ? /*#__PURE__*/_jsxDEV(SnakeBoard, {\n        snake: snake,\n        food: food\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n        setGameOver: setGameOver,\n        setGame: props.setGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SnakeGame, \"/CTu81LMhi7rwc0e8SCmiO3Emjg=\", false, function () {\n  return [useKey, useKey, useKey, useKey];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useKey","SnakeBoard","generateFoodPosition","initialSnake","moveSnake","GameOver","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","props","_s","snake","setSnake","direction","setDirection","food","setFood","gameover","setGameOver","intervalTime","setIntervalTime","interval","setInterval","clearInterval","handleKeyPress","newDirection","prevDirection","console","log","children","id","onClick","setGame","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/SnakeGame.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useKey } from 'react-use';\r\nimport SnakeBoard from './SnakeBoard';\r\nimport { \r\n    CELL_SIZE, \r\n    generateFoodPosition, \r\n    initialSnake, \r\n    moveSnake, \r\n    Direction, \r\n    Position\r\n} from './utils/utils';\r\nimport './css/SnakeGame.css'\r\nimport GameOver from '../GameOver';\r\n\r\n\r\n\r\ninterface SnakeGameProps {\r\n    setGame: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst SnakeGame = (props: SnakeGameProps) => {\r\n    const [snake, setSnake] = useState<Position[]>(initialSnake);\r\n    const [direction, setDirection] = useState<Direction>('STOP');\r\n    const [food, setFood] = useState<Position>(generateFoodPosition);\r\n    const [gameover, setGameOver] = useState<boolean>(false);\r\n    const [intervalTime, setIntervalTime] = useState<number>(200);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => moveSnake(\r\n            direction, \r\n            snake,\r\n            food,\r\n            intervalTime,\r\n            setSnake, \r\n            setFood, \r\n            setGameOver,\r\n            setIntervalTime,\r\n            setDirection\r\n        ), intervalTime);\r\n        \r\n        return () => clearInterval(interval);\r\n    }, [direction, snake]);\r\n\r\n\r\n    const handleKeyPress = (newDirection: Direction) => {\r\n        setDirection((prevDirection )=> {\r\n            if (\r\n            (direction === 'UP' && newDirection === 'DOWN') ||\r\n            (direction === 'DOWN' && newDirection === 'UP') ||\r\n            (direction === 'LEFT' && newDirection === 'RIGHT') ||\r\n            (direction === 'RIGHT' && newDirection === 'LEFT')\r\n            ) {\r\n            // Ignore the key press if it's the opposite direction\r\n            console.log(newDirection);\r\n            return prevDirection;\r\n            }\r\n            return newDirection;\r\n        });\r\n        // setDirection(newDirection);\r\n    };\r\n    \r\n    useKey('ArrowUp',    () => handleKeyPress('UP'));\r\n    useKey('ArrowDown',  () => handleKeyPress('DOWN'));\r\n    useKey('ArrowLeft',  () => handleKeyPress('LEFT'));\r\n    useKey('ArrowRight', () => handleKeyPress('RIGHT'));\r\n    // useKey('ArrowUp',    () => setDirection('UP'));\r\n    // useKey('ArrowDown',  () => setDirection('DOWN'));\r\n    // useKey('ArrowLeft',  () => setDirection('LEFT'));\r\n    // useKey('ArrowRight', () => setDirection('RIGHT'));\r\n  \r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                id=\"moveSnake\"\r\n                // tabIndex={0}\r\n            >\r\n                <a onClick={() => props.setGame(\"menu\")}><h1 id=\"SnakeTitle\">Snake Game</h1></a>\r\n                { !gameover ?\r\n                    <SnakeBoard snake={snake} food={food} /> :\r\n                    <GameOver setGameOver={setGameOver} setGame={props.setGame}/>\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}