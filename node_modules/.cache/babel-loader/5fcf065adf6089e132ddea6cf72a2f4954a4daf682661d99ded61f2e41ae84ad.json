{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u85E4\\u6FA4 \\u826F\\u7950\\\\Downloads\\\\\\u7814\\u4FEE\\\\learning_fujisawa\\\\webapp\\\\game\\\\src\\\\components\\\\SnakeGame\\\\SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useKey } from 'react-use';\nimport SnakeBoard from './SnakeBoard';\nimport { generateFoodPosition, initialSnake, moveSnake } from './utils/utils';\nimport './css/SnakeGame.css';\nimport GameOver from './GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = props => {\n  _s();\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState('STOP');\n  const [food, setFood] = useState(generateFoodPosition);\n  const [gameoverFlag, setGameOver] = useState(false);\n  const [intervalTime, setIntervalTime] = useState(200);\n  const [moveCount, setMoveCount] = useState(0);\n  const [foodCount, setFoodCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => moveSnake(direction, snake, food, intervalTime, setSnake, setFood, setGameOver, setIntervalTime, setDirection, moveCount, setMoveCount, foodCount, setFoodCount), intervalTime);\n    return () => clearInterval(interval);\n  }, [direction, snake]);\n  const handleKeyPress = newDirection => {\n    if (direction === 'UP' && newDirection === 'DOWN' || direction === 'DOWN' && newDirection === 'UP' || direction === 'LEFT' && newDirection === 'RIGHT' || direction === 'RIGHT' && newDirection === 'LEFT') {\n      // Ignore the key press if it's the opposite direction\n      console.log(newDirection);\n      return;\n    }\n    setDirection(newDirection);\n  };\n  useKey('ArrowUp', () => handleKeyPress('UP'));\n  useKey('ArrowDown', () => handleKeyPress('DOWN'));\n  useKey('ArrowLeft', () => handleKeyPress('LEFT'));\n  useKey('ArrowRight', () => handleKeyPress('RIGHT'));\n  // useKey('ArrowUp',    () => setDirection('UP'));\n  // useKey('ArrowDown',  () => setDirection('DOWN'));\n  // useKey('ArrowLeft',  () => setDirection('LEFT'));\n  // useKey('ArrowRight', () => setDirection('RIGHT'));\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"moveSnake\",\n    tabIndex: 0,\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: () => props.setGame(\"menu\"),\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"SnakeTitle\",\n        children: \"Snake Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 54\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), !gameoverFlag ? /*#__PURE__*/_jsxDEV(SnakeBoard, {\n      snake: snake,\n      food: food\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n      setGameOver: setGameOver,\n      setGame: props.setGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(SnakeGame, \"beGLb27N2FIc/JJs4f9txvOB61I=\", false, function () {\n  return [useKey, useKey, useKey, useKey];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useKey","SnakeBoard","generateFoodPosition","initialSnake","moveSnake","GameOver","jsxDEV","_jsxDEV","SnakeGame","props","_s","snake","setSnake","direction","setDirection","food","setFood","gameoverFlag","setGameOver","intervalTime","setIntervalTime","moveCount","setMoveCount","foodCount","setFoodCount","interval","setInterval","clearInterval","handleKeyPress","newDirection","console","log","id","tabIndex","children","onClick","setGame","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/SnakeGame.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useKey } from 'react-use';\r\nimport SnakeBoard from './SnakeBoard';\r\nimport { \r\n    CELL_SIZE, \r\n    generateFoodPosition, \r\n    initialSnake, \r\n    moveSnake, \r\n    Direction, \r\n    Position\r\n} from './utils/utils';\r\nimport './css/SnakeGame.css'\r\nimport GameOver from './GameOver';\r\n\r\n\r\n\r\ninterface SnakeGameProps {\r\n    setGame: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst SnakeGame = (props: SnakeGameProps) => {\r\n    const [snake, setSnake] = useState<Position[]>(initialSnake);\r\n    const [direction, setDirection] = useState<Direction>('STOP');\r\n    const [food, setFood] = useState<Position[]>(generateFoodPosition);\r\n    const [gameoverFlag, setGameOver] = useState<boolean>(false)\r\n    const [intervalTime, setIntervalTime] = useState<number>(200);\r\n    const [moveCount, setMoveCount] = useState<number>(0);\r\n    const[foodCount, setFoodCount] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => moveSnake(\r\n            direction, \r\n            snake,\r\n            food,\r\n            intervalTime,\r\n            setSnake, \r\n            setFood, \r\n            setGameOver,\r\n            setIntervalTime,\r\n            setDirection,\r\n            moveCount,\r\n            setMoveCount,\r\n            foodCount,\r\n            setFoodCount\r\n        ), intervalTime);\r\n        \r\n        return () => clearInterval(interval);\r\n    }, [direction, snake]);\r\n\r\n\r\n    const handleKeyPress = (newDirection: Direction) => {\r\n        if (\r\n          (direction === 'UP' && newDirection === 'DOWN') ||\r\n          (direction === 'DOWN' && newDirection === 'UP') ||\r\n          (direction === 'LEFT' && newDirection === 'RIGHT') ||\r\n          (direction === 'RIGHT' && newDirection === 'LEFT')\r\n        ) {\r\n          // Ignore the key press if it's the opposite direction\r\n          console.log(newDirection);\r\n          return;\r\n        }\r\n        setDirection(newDirection);\r\n    };\r\n    \r\n    useKey('ArrowUp',    () => handleKeyPress('UP'));\r\n    useKey('ArrowDown',  () => handleKeyPress('DOWN'));\r\n    useKey('ArrowLeft',  () => handleKeyPress('LEFT'));\r\n    useKey('ArrowRight', () => handleKeyPress('RIGHT'));\r\n    // useKey('ArrowUp',    () => setDirection('UP'));\r\n    // useKey('ArrowDown',  () => setDirection('DOWN'));\r\n    // useKey('ArrowLeft',  () => setDirection('LEFT'));\r\n    // useKey('ArrowRight', () => setDirection('RIGHT'));\r\n  \r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"moveSnake\"\r\n            tabIndex={0}\r\n        >\r\n            <a onClick={() => props.setGame(\"menu\")}><h1 id=\"SnakeTitle\">Snake Game</h1></a>\r\n            { !gameoverFlag ?\r\n                <SnakeBoard snake={snake} food={food} /> :\r\n                <GameOver setGameOver={setGameOver} setGame={props.setGame}/>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}