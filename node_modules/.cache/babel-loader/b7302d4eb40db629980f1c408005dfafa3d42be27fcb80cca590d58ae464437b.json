{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u85E4\\u6FA4 \\u826F\\u7950\\\\Downloads\\\\\\u7814\\u4FEE\\\\learning_fujisawa\\\\webapp\\\\game\\\\src\\\\components\\\\SnakeGame\\\\SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useKey } from 'react-use';\nimport SnakeBoard from './SnakeBoard';\nimport { generateFoodPosition, initialSnake, moveSnake } from './utils/utils';\nimport './SnakeGame.css';\nimport GameOver from './GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState('');\n  const [food, setFood] = useState(generateFoodPosition);\n  const [gameoverFlag, setGameOver] = useState(false);\n  const [intervalTime, setIntervalTime] = useState(200);\n  useEffect(() => {\n    const interval = setInterval(() => moveSnake(direction, snake, food, intervalTime, setSnake, setFood, setGameOver, setIntervalTime, setDirection), intervalTime);\n    return () => clearInterval(interval);\n  }, [direction, snake]);\n\n  // useKey('ArrowUp',    () => setDirection('UP'));\n  // useKey('ArrowDown',  () => setDirection('DOWN'));\n  // useKey('ArrowLeft',  () => setDirection('LEFT'));\n  // useKey('ArrowRight', () => setDirection('RIGHT'));\n  // キーボード入力の処理\n  useKey('ArrowUp', () => {\n    if (direction !== 'DOWN') {\n      setDirection('UP');\n    }\n  });\n  useKey('ArrowDown', () => {\n    if (direction !== 'UP') {\n      setDirection('DOWN');\n    }\n  });\n  useKey('ArrowLeft', () => {\n    if (direction !== 'RIGHT') {\n      setDirection('LEFT');\n    }\n  });\n  useKey('ArrowRight', () => {\n    if (direction !== 'LEFT') {\n      setDirection('RIGHT');\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"moveSnake\",\n    tabIndex: 0,\n    children: !gameoverFlag ? /*#__PURE__*/_jsxDEV(SnakeBoard, {\n      snake: snake,\n      food: food\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n      setGameOver: setGameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(SnakeGame, \"BgGuPCCBsb62vXhaMRxvKqOXdq0=\", false, function () {\n  return [useKey, useKey, useKey, useKey];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useKey","SnakeBoard","generateFoodPosition","initialSnake","moveSnake","GameOver","jsxDEV","_jsxDEV","SnakeGame","_s","snake","setSnake","direction","setDirection","food","setFood","gameoverFlag","setGameOver","intervalTime","setIntervalTime","interval","setInterval","clearInterval","id","tabIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/SnakeGame.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useKey } from 'react-use';\r\nimport SnakeBoard from './SnakeBoard';\r\nimport { \r\n    CELL_SIZE, \r\n    generateFoodPosition, \r\n    initialSnake, \r\n    moveSnake, \r\n    Direction, \r\n    Position\r\n} from './utils/utils';\r\nimport './SnakeGame.css'\r\nimport GameOver from './GameOver';\r\n\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState<Position[]>(initialSnake);\r\n    const [direction, setDirection] = useState<Direction>('');\r\n    const [food, setFood] = useState<Position>(generateFoodPosition);\r\n    const [gameoverFlag, setGameOver] = useState<boolean>(false)\r\n    const [intervalTime, setIntervalTime] = useState<number>(200);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => moveSnake(\r\n            direction, \r\n            snake,\r\n            food,\r\n            intervalTime,\r\n            setSnake, \r\n            setFood, \r\n            setGameOver,\r\n            setIntervalTime,\r\n            setDirection\r\n        ), intervalTime);\r\n        return () => clearInterval(interval);\r\n    }, [direction, snake]);\r\n\r\n    // useKey('ArrowUp',    () => setDirection('UP'));\r\n    // useKey('ArrowDown',  () => setDirection('DOWN'));\r\n    // useKey('ArrowLeft',  () => setDirection('LEFT'));\r\n    // useKey('ArrowRight', () => setDirection('RIGHT'));\r\n    // キーボード入力の処理\r\n    useKey('ArrowUp', () => {\r\n        if (direction !== 'DOWN') {\r\n            setDirection('UP');\r\n        }\r\n    });\r\n    useKey('ArrowDown', () => {\r\n        if (direction !== 'UP') {\r\n            setDirection('DOWN');\r\n        }\r\n    });\r\n    useKey('ArrowLeft', () => {\r\n        if (direction !== 'RIGHT') {\r\n            setDirection('LEFT');\r\n        }\r\n    });\r\n    useKey('ArrowRight', () => {\r\n        if (direction !== 'LEFT') {\r\n            setDirection('RIGHT');\r\n        }\r\n    });\r\n  \r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"moveSnake\"\r\n            tabIndex={0}\r\n        >\r\n            { !gameoverFlag ?\r\n                <SnakeBoard snake={snake} food={food} /> :\r\n                <GameOver setGameOver={setGameOver} />\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SnakeGame;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAOC,UAAU,MAAM,cAAc;AACrC,SAEIC,oBAAoB,EACpBC,YAAY,EACZC,SAAS,QAGN,eAAe;AACtB,OAAO,iBAAiB;AACxB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAaK,YAAY,CAAC;EAC5D,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAY,EAAE,CAAC;EACzD,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAWI,oBAAoB,CAAC;EAChE,MAAM,CAACc,YAAY,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAU,KAAK,CAAC;EAC5D,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAS,GAAG,CAAC;EAE7DC,SAAS,CAAC,MAAM;IACZ,MAAMqB,QAAQ,GAAGC,WAAW,CAAC,MAAMjB,SAAS,CACxCQ,SAAS,EACTF,KAAK,EACLI,IAAI,EACJI,YAAY,EACZP,QAAQ,EACRI,OAAO,EACPE,WAAW,EACXE,eAAe,EACfN,YACJ,CAAC,EAAEK,YAAY,CAAC;IAChB,OAAO,MAAMI,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACR,SAAS,EAAEF,KAAK,CAAC,CAAC;;EAEtB;EACA;EACA;EACA;EACA;EACAV,MAAM,CAAC,SAAS,EAAE,MAAM;IACpB,IAAIY,SAAS,KAAK,MAAM,EAAE;MACtBC,YAAY,CAAC,IAAI,CAAC;IACtB;EACJ,CAAC,CAAC;EACFb,MAAM,CAAC,WAAW,EAAE,MAAM;IACtB,IAAIY,SAAS,KAAK,IAAI,EAAE;MACpBC,YAAY,CAAC,MAAM,CAAC;IACxB;EACJ,CAAC,CAAC;EACFb,MAAM,CAAC,WAAW,EAAE,MAAM;IACtB,IAAIY,SAAS,KAAK,OAAO,EAAE;MACvBC,YAAY,CAAC,MAAM,CAAC;IACxB;EACJ,CAAC,CAAC;EACFb,MAAM,CAAC,YAAY,EAAE,MAAM;IACvB,IAAIY,SAAS,KAAK,MAAM,EAAE;MACtBC,YAAY,CAAC,OAAO,CAAC;IACzB;EACJ,CAAC,CAAC;EAIF,oBACIN,OAAA;IACIgB,EAAE,EAAC,WAAW;IACdC,QAAQ,EAAE,CAAE;IAAAC,QAAA,EAEV,CAACT,YAAY,gBACXT,OAAA,CAACN,UAAU;MAACS,KAAK,EAAEA,KAAM;MAACI,IAAI,EAAEA;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBACxCtB,OAAA,CAACF,QAAQ;MAACY,WAAW,EAAEA;IAAY;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGzC,CAAC;AAEd,CAAC;AAACpB,EAAA,CA9DID,SAAS;EAAA,QA2BXR,MAAM,EAKNA,MAAM,EAKNA,MAAM,EAKNA,MAAM;AAAA;AAAA8B,EAAA,GA1CJtB,SAAS;AAiEf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}