{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u85E4\\u6FA4 \\u826F\\u7950\\\\Downloads\\\\\\u7814\\u4FEE\\\\learning_fujisawa\\\\webapp\\\\game\\\\src\\\\components\\\\SnakeGame\\\\SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useKey } from 'react-use';\nimport SnakeBoard from './SnakeBoard';\nimport GameOver from '../GameOver';\nimport { generateFoodPosition, initialSnake, moveSnake } from './utils/utils';\nimport '../css/SnakeGame.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = props => {\n  _s();\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState('STOP');\n  const [food, setFood] = useState(generateFoodPosition);\n  const [gameover, setGameOver] = useState(false);\n  const [intervalTime, setIntervalTime] = useState(200);\n  useEffect(() => {\n    const interval = setInterval(() => moveSnake(direction, snake, food, intervalTime, setSnake, setFood, setGameOver, setIntervalTime, setDirection), intervalTime);\n    return () => clearInterval(interval);\n  }, [direction, snake]);\n  const handleKeyPress = newDirection => {\n    setDirection(prevDirection => {\n      if (prevDirection === 'UP' && newDirection === 'DOWN' || prevDirection === 'DOWN' && newDirection === 'UP' || prevDirection === 'LEFT' && newDirection === 'RIGHT' || prevDirection === 'RIGHT' && newDirection === 'LEFT') {\n        // Ignore the key press if it's the opposite direction\n        // console.log(newDirection);\n        return prevDirection;\n      }\n      // const newPosition = calculateNewPosition(prevDirection);\n\n      // if (isValidMove(newPosition)) {\n      //     return newDirection;\n      // }\n      // else {\n      //     return prevDirection;\n      // }\n      return newDirection;\n    });\n    // setDirection(newDirection);\n  };\n  useKey('ArrowUp', () => handleKeyPress('UP'));\n  useKey('ArrowDown', () => handleKeyPress('DOWN'));\n  useKey('ArrowLeft', () => handleKeyPress('LEFT'));\n  useKey('ArrowRight', () => handleKeyPress('RIGHT'));\n  // useKey('ArrowUp',    () => setDirection('UP'));\n  // useKey('ArrowDown',  () => setDirection('DOWN'));\n  // useKey('ArrowLeft',  () => setDirection('LEFT'));\n  // useKey('ArrowRight', () => setDirection('RIGHT'));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moveSnake\"\n      // tabIndex={0}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"SnakeTitle\",\n        children: \"Snake Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !gameover ? /*#__PURE__*/_jsxDEV(SnakeBoard, {\n          snake: snake,\n          food: food,\n          direction: direction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n          setGameOver: setGameOver,\n          setGame: props.setGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SnakeGame, \"/CTu81LMhi7rwc0e8SCmiO3Emjg=\", false, function () {\n  return [useKey, useKey, useKey, useKey];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useKey","SnakeBoard","GameOver","generateFoodPosition","initialSnake","moveSnake","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","props","_s","snake","setSnake","direction","setDirection","food","setFood","gameover","setGameOver","intervalTime","setIntervalTime","interval","setInterval","clearInterval","handleKeyPress","newDirection","prevDirection","children","id","fileName","_jsxFileName","lineNumber","columnNumber","setGame","_c","$RefreshReg$"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/SnakeGame.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useKey } from 'react-use';\r\nimport SnakeBoard from './SnakeBoard';\r\nimport GameOver from '../GameOver';\r\nimport { \r\n    CELL_SIZE, \r\n    generateFoodPosition, \r\n    initialSnake, \r\n    moveSnake, \r\n    Direction, \r\n    Position\r\n} from './utils/utils';\r\nimport '../css/SnakeGame.css'\r\n\r\n\r\n\r\n\r\ninterface SnakeGameProps {\r\n    setGame: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst SnakeGame = (props: SnakeGameProps) => {\r\n    const [snake, setSnake] = useState<Position[]>(initialSnake);\r\n    const [direction, setDirection] = useState<Direction>('STOP');\r\n    const [food, setFood] = useState<Position>(generateFoodPosition);\r\n    const [gameover, setGameOver] = useState<boolean>(false);\r\n    const [intervalTime, setIntervalTime] = useState<number>(200);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => moveSnake(\r\n            direction, \r\n            snake,\r\n            food,\r\n            intervalTime,\r\n            setSnake, \r\n            setFood, \r\n            setGameOver,\r\n            setIntervalTime,\r\n            setDirection\r\n        ), intervalTime);\r\n        \r\n        return () => clearInterval(interval);\r\n    }, [direction, snake]);\r\n\r\n\r\n    const handleKeyPress = (newDirection: Direction) => {\r\n        setDirection((prevDirection )=> {\r\n            if (\r\n            (prevDirection === 'UP' && newDirection === 'DOWN') ||\r\n            (prevDirection === 'DOWN' && newDirection === 'UP') ||\r\n            (prevDirection === 'LEFT' && newDirection === 'RIGHT') ||\r\n            (prevDirection === 'RIGHT' && newDirection === 'LEFT')\r\n            ) {\r\n            // Ignore the key press if it's the opposite direction\r\n            // console.log(newDirection);\r\n            return prevDirection;\r\n            }\r\n            // const newPosition = calculateNewPosition(prevDirection);\r\n\r\n            // if (isValidMove(newPosition)) {\r\n            //     return newDirection;\r\n            // }\r\n            // else {\r\n            //     return prevDirection;\r\n            // }\r\n            return newDirection;\r\n        });\r\n        // setDirection(newDirection);\r\n    };\r\n    \r\n    useKey('ArrowUp',    () => handleKeyPress('UP'));\r\n    useKey('ArrowDown',  () => handleKeyPress('DOWN'));\r\n    useKey('ArrowLeft',  () => handleKeyPress('LEFT'));\r\n    useKey('ArrowRight', () => handleKeyPress('RIGHT'));\r\n    // useKey('ArrowUp',    () => setDirection('UP'));\r\n    // useKey('ArrowDown',  () => setDirection('DOWN'));\r\n    // useKey('ArrowLeft',  () => setDirection('LEFT'));\r\n    // useKey('ArrowRight', () => setDirection('RIGHT'));\r\n  \r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                id=\"moveSnake\"\r\n                // tabIndex={0}\r\n            >\r\n                <h1 id=\"SnakeTitle\">Snake Game</h1>\r\n                <div>\r\n\r\n                    { !gameover ?\r\n                        <SnakeBoard snake={snake} food={food} direction={direction}/> :\r\n                        <GameOver setGameOver={setGameOver} setGame={props.setGame}/>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}