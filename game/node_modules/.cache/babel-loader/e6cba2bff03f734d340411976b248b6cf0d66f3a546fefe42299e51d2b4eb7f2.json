{"ast":null,"code":"// export const gameover = false;\n\nexport const CELL_SIZE = 20;\nexport const initialSnake = [{\n  x: Math.floor(CELL_SIZE / 4),\n  y: Math.floor(CELL_SIZE / 2)\n}];\nexport const generateFoodPosition = () => {\n  // let _x: number = Math.floor(Math.random() * CELL_SIZE) + 2;\n  // let _y: number = Math.floor(Math.random() * CELL_SIZE) + 2;\n  return {\n    x: Math.floor(Math.random() * CELL_SIZE),\n    y: Math.floor(Math.random() * CELL_SIZE)\n  };\n};\nexport const moveSnake = (direction, snake, food, intervalTime, setSnake, setFood, setGameOver, setIntervalTime, setDirection) => {\n  let newSnake = [...snake];\n  let head = {\n    ...newSnake[0]\n  };\n  switch (direction) {\n    case 'UP':\n      head.y -= 1;\n      break;\n    case 'DOWN':\n      head.y += 1;\n      break;\n    case 'LEFT':\n      head.x -= 1;\n      break;\n    case 'RIGHT':\n      head.x += 1;\n      break;\n    default:\n      break;\n  }\n  if (head.x < 0 || head.y < 0 || head.x >= CELL_SIZE || head.y >= CELL_SIZE || newSnake.slice(1).some(body => body.x === head.x && body.y === head.y)) {\n    setSnake(initialSnake);\n    setIntervalTime(200);\n    setDirection('RIGHT');\n    setGameOver(true);\n    return;\n  }\n  if (head.x === food.x && head.y === food.y) {\n    newSnake.unshift({\n      ...head\n    });\n    setFood(generateFoodPosition());\n    setIntervalTime(intervalTime - 10);\n  } else {\n    newSnake.pop();\n  }\n  newSnake.unshift(head);\n  setSnake(newSnake);\n};","map":{"version":3,"names":["CELL_SIZE","initialSnake","x","Math","floor","y","generateFoodPosition","random","moveSnake","direction","snake","food","intervalTime","setSnake","setFood","setGameOver","setIntervalTime","setDirection","newSnake","head","slice","some","body","unshift","pop"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/utils/utils.ts"],"sourcesContent":["// export const gameover = false;\r\n\r\nexport const CELL_SIZE = 20;\r\n\r\nexport interface Position {\r\n    x: number,\r\n    y: number\r\n}\r\nexport type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\r\n\r\nexport const initialSnake: Position[] = [{x: Math.floor(CELL_SIZE/4), y: Math.floor(CELL_SIZE/2) }];\r\n\r\nexport const generateFoodPosition = (): Position => {\r\n    \r\n    // let _x: number = Math.floor(Math.random() * CELL_SIZE) + 2;\r\n    // let _y: number = Math.floor(Math.random() * CELL_SIZE) + 2;\r\n    return {\r\n        x: Math.floor(Math.random() * CELL_SIZE),\r\n        y: Math.floor(Math.random() * CELL_SIZE)\r\n    };\r\n};\r\n\r\n\r\nexport const moveSnake = (\r\n    direction: Direction,\r\n    snake: Position[],\r\n    food: Position,\r\n    intervalTime: number,\r\n    setSnake: React.Dispatch<React.SetStateAction<Position[]>>,\r\n    setFood: React.Dispatch<React.SetStateAction<Position>>,\r\n    setGameOver: Function,\r\n    setIntervalTime: Function,\r\n    setDirection: Function\r\n  ) => {\r\n    let newSnake = [...snake];\r\n    let head = { ...newSnake[0] };\r\n  \r\n    switch (direction) {\r\n      case 'UP':\r\n        head.y -= 1;\r\n        break;\r\n      case 'DOWN':\r\n        head.y += 1;\r\n        break;\r\n      case 'LEFT':\r\n        head.x -= 1;\r\n        break;\r\n      case 'RIGHT':\r\n        head.x += 1;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (head.x < 0 || \r\n        head.y < 0 || \r\n        head.x >= CELL_SIZE || \r\n        head.y >= CELL_SIZE ||\r\n        newSnake.slice(1).some((body) => body.x === head.x && body.y === head.y)  \r\n    ) {\r\n        setSnake(initialSnake);\r\n        setIntervalTime(200);\r\n        setDirection('RIGHT');\r\n        setGameOver(true);\r\n        return ;\r\n    }\r\n\r\n    if (head.x === food.x && head.y === food.y) {\r\n        newSnake.unshift({ ...head });\r\n        setFood(generateFoodPosition());\r\n        setIntervalTime(intervalTime  - 10);\r\n    } else {\r\n        newSnake.pop();\r\n    }\r\n\r\n    newSnake.unshift(head);\r\n    setSnake(newSnake);\r\n\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,SAAS,GAAG,EAAE;AAQ3B,OAAO,MAAMC,YAAwB,GAAG,CAAC;EAACC,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACJ,SAAS,GAAC,CAAC,CAAC;EAAEK,CAAC,EAAEF,IAAI,CAACC,KAAK,CAACJ,SAAS,GAAC,CAAC;AAAE,CAAC,CAAC;AAEnG,OAAO,MAAMM,oBAAoB,GAAGA,CAAA,KAAgB;EAEhD;EACA;EACA,OAAO;IACHJ,CAAC,EAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGP,SAAS,CAAC;IACxCK,CAAC,EAAEF,IAAI,CAACC,KAAK,CAACD,IAAI,CAACI,MAAM,CAAC,CAAC,GAAGP,SAAS;EAC3C,CAAC;AACL,CAAC;AAGD,OAAO,MAAMQ,SAAS,GAAGA,CACrBC,SAAoB,EACpBC,KAAiB,EACjBC,IAAc,EACdC,YAAoB,EACpBC,QAA0D,EAC1DC,OAAuD,EACvDC,WAAqB,EACrBC,eAAyB,EACzBC,YAAsB,KACnB;EACH,IAAIC,QAAQ,GAAG,CAAC,GAAGR,KAAK,CAAC;EACzB,IAAIS,IAAI,GAAG;IAAE,GAAGD,QAAQ,CAAC,CAAC;EAAE,CAAC;EAE7B,QAAQT,SAAS;IACf,KAAK,IAAI;MACPU,IAAI,CAACd,CAAC,IAAI,CAAC;MACX;IACF,KAAK,MAAM;MACTc,IAAI,CAACd,CAAC,IAAI,CAAC;MACX;IACF,KAAK,MAAM;MACTc,IAAI,CAACjB,CAAC,IAAI,CAAC;MACX;IACF,KAAK,OAAO;MACViB,IAAI,CAACjB,CAAC,IAAI,CAAC;MACX;IACF;MACE;EACJ;EAEA,IAAIiB,IAAI,CAACjB,CAAC,GAAG,CAAC,IACViB,IAAI,CAACd,CAAC,GAAG,CAAC,IACVc,IAAI,CAACjB,CAAC,IAAIF,SAAS,IACnBmB,IAAI,CAACd,CAAC,IAAIL,SAAS,IACnBkB,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACpB,CAAC,KAAKiB,IAAI,CAACjB,CAAC,IAAIoB,IAAI,CAACjB,CAAC,KAAKc,IAAI,CAACd,CAAC,CAAC,EAC1E;IACEQ,QAAQ,CAACZ,YAAY,CAAC;IACtBe,eAAe,CAAC,GAAG,CAAC;IACpBC,YAAY,CAAC,OAAO,CAAC;IACrBF,WAAW,CAAC,IAAI,CAAC;IACjB;EACJ;EAEA,IAAII,IAAI,CAACjB,CAAC,KAAKS,IAAI,CAACT,CAAC,IAAIiB,IAAI,CAACd,CAAC,KAAKM,IAAI,CAACN,CAAC,EAAE;IACxCa,QAAQ,CAACK,OAAO,CAAC;MAAE,GAAGJ;IAAK,CAAC,CAAC;IAC7BL,OAAO,CAACR,oBAAoB,CAAC,CAAC,CAAC;IAC/BU,eAAe,CAACJ,YAAY,GAAI,EAAE,CAAC;EACvC,CAAC,MAAM;IACHM,QAAQ,CAACM,GAAG,CAAC,CAAC;EAClB;EAEAN,QAAQ,CAACK,OAAO,CAACJ,IAAI,CAAC;EACtBN,QAAQ,CAACK,QAAQ,CAAC;AAEtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}