{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u85E4\\u6FA4 \\u826F\\u7950\\\\Downloads\\\\\\u7814\\u4FEE\\\\learning_fujisawa\\\\webapp\\\\game\\\\src\\\\components\\\\SnakeGame\\\\SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useKey } from 'react-use';\nimport SnakeBoard from './SnakeBoard';\nimport GameOver from '../GameOver';\nimport { generateFoodPosition, initialSnake, moveSnake } from './utils/utils';\nimport '../css/SnakeGame.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SnakeGame = props => {\n  _s();\n  const [snake, setSnake] = useState(initialSnake);\n  const [direction, setDirection] = useState('STOP');\n  const [food, setFood] = useState(generateFoodPosition);\n  const [gameover, setGameOver] = useState(false);\n  const [intervalTime, setIntervalTime] = useState(200);\n  const [hitCount, setHitCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => moveSnake(direction, snake, food, intervalTime, hitCount, setSnake, setFood, setGameOver, setIntervalTime, setDirection, setHitCount, props.setUserScore), intervalTime);\n    if (direction !== 'STOP') {\n      props.setUserScore(prevScore => prevScore + 1);\n    }\n    return () => clearInterval(interval);\n  }, [direction, snake]);\n  const handleKeyPress = (newDirection, e) => {\n    e.preventDefault();\n    setDirection(prevDirection => {\n      if (prevDirection === 'UP' && newDirection === 'DOWN' || prevDirection === 'DOWN' && newDirection === 'UP' || prevDirection === 'LEFT' && newDirection === 'RIGHT' || prevDirection === 'RIGHT' && newDirection === 'LEFT') {\n        // Ignore the key press if it's the opposite direction\n        // console.log(newDirection);\n        return prevDirection;\n      }\n      return newDirection;\n    });\n    // setDirection(newDirection);\n  };\n  useKey('ArrowUp', e => handleKeyPress('UP', e));\n  useKey('ArrowDown', e => handleKeyPress('DOWN', e));\n  useKey('ArrowLeft', e => handleKeyPress('LEFT', e));\n  useKey('ArrowRight', e => handleKeyPress('RIGHT', e));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"moveSnake\"\n      // tabIndex={0}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"SnakeTitle\",\n        children: \"Snake Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!gameover ? /*#__PURE__*/_jsxDEV(SnakeBoard, {\n          snake: snake,\n          food: food,\n          direction: direction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(GameOver, {\n          setGameOver: setGameOver,\n          setGame: props.setGame,\n          setScores: props.setScores,\n          setUserScore: props.setUserScore,\n          userName: props.userName,\n          userScore: props.userScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: props.userScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SnakeGame, \"6Y6SxwZm0DSueIO9icGW9iy0hMY=\", false, function () {\n  return [useKey, useKey, useKey, useKey];\n});\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["useState","useEffect","useKey","SnakeBoard","GameOver","generateFoodPosition","initialSnake","moveSnake","jsxDEV","_jsxDEV","Fragment","_Fragment","SnakeGame","props","_s","snake","setSnake","direction","setDirection","food","setFood","gameover","setGameOver","intervalTime","setIntervalTime","hitCount","setHitCount","interval","setInterval","setUserScore","prevScore","clearInterval","handleKeyPress","newDirection","e","preventDefault","prevDirection","children","id","fileName","_jsxFileName","lineNumber","columnNumber","setGame","setScores","userName","userScore","_c","$RefreshReg$"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/learning_fujisawa/webapp/game/src/components/SnakeGame/SnakeGame.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useKey } from 'react-use';\r\nimport SnakeBoard from './SnakeBoard';\r\nimport GameOver from '../GameOver';\r\nimport { \r\n    CELL_SIZE, \r\n    generateFoodPosition, \r\n    initialSnake, \r\n    moveSnake, \r\n    Direction, \r\n    Position,\r\n    Score\r\n} from './utils/utils';\r\nimport '../css/SnakeGame.css'\r\n\r\n\r\n\r\n\r\ninterface SnakeGameProps {\r\n    setGame:      React.Dispatch<React.SetStateAction<string>>;\r\n    setScores:    React.Dispatch<React.SetStateAction<Score[]>>\r\n    setUserScore: React.Dispatch<React.SetStateAction<number>>;\r\n    userScore:    number;\r\n    userName:     string;\r\n}\r\n\r\nconst SnakeGame = (props: SnakeGameProps) => {\r\n    const [snake, setSnake] = useState<Position[]>(initialSnake);\r\n    const [direction, setDirection] = useState<Direction>('STOP');\r\n    const [food, setFood] = useState<Position>(generateFoodPosition);\r\n    const [gameover, setGameOver] = useState<boolean>(false);\r\n    const [intervalTime, setIntervalTime] = useState<number>(200);\r\n    const [hitCount, setHitCount] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => moveSnake(\r\n            direction, \r\n            snake,\r\n            food,\r\n            intervalTime,\r\n            hitCount,\r\n            setSnake, \r\n            setFood, \r\n            setGameOver,\r\n            setIntervalTime,\r\n            setDirection,\r\n            setHitCount,\r\n            props.setUserScore,\r\n        ), intervalTime);\r\n\r\n        if ( direction !== 'STOP' ) {\r\n            props.setUserScore(prevScore => prevScore + 1);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [direction, snake]);\r\n\r\n\r\n    const handleKeyPress = (newDirection: Direction, e: KeyboardEvent) => {\r\n        e.preventDefault();\r\n        setDirection((prevDirection )=> {\r\n            if (\r\n            (prevDirection === 'UP' && newDirection === 'DOWN') ||\r\n            (prevDirection === 'DOWN' && newDirection === 'UP') ||\r\n            (prevDirection === 'LEFT' && newDirection === 'RIGHT') ||\r\n            (prevDirection === 'RIGHT' && newDirection === 'LEFT')\r\n            ) {\r\n            // Ignore the key press if it's the opposite direction\r\n            // console.log(newDirection);\r\n            return prevDirection;\r\n            }\r\n            return newDirection;\r\n        });\r\n        // setDirection(newDirection);\r\n    };\r\n    \r\n    useKey('ArrowUp',    (e) => handleKeyPress('UP',    e as KeyboardEvent));\r\n    useKey('ArrowDown',  (e) => handleKeyPress('DOWN',  e as KeyboardEvent));\r\n    useKey('ArrowLeft',  (e) => handleKeyPress('LEFT',  e as KeyboardEvent));\r\n    useKey('ArrowRight', (e) => handleKeyPress('RIGHT', e as KeyboardEvent));  \r\n\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                id=\"moveSnake\"\r\n                // tabIndex={0}\r\n            >\r\n                <h1 id=\"SnakeTitle\">Snake Game</h1>\r\n                <div>\r\n\r\n                    { !gameover ?\r\n                        <SnakeBoard snake={snake} food={food} direction={direction}/> :\r\n                        <GameOver \r\n                            setGameOver={setGameOver} \r\n                            setGame={props.setGame}\r\n                            setScores={props.setScores}\r\n                            setUserScore={props.setUserScore}\r\n                            userName={props.userName}\r\n                            userScore={props.userScore}\r\n                        />\r\n                    }\r\n                    <p>{props.userScore}</p>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default SnakeGame;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAEIC,oBAAoB,EACpBC,YAAY,EACZC,SAAS,QAIN,eAAe;AACtB,OAAO,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAa7B,MAAMC,SAAS,GAAIC,KAAqB,IAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAaM,YAAY,CAAC;EAC5D,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAY,MAAM,CAAC;EAC7D,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAWK,oBAAoB,CAAC;EAChE,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAS,GAAG,CAAC;EAC7D,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAS,CAAC,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACZ,MAAM0B,QAAQ,GAAGC,WAAW,CAAC,MAAMrB,SAAS,CACxCU,SAAS,EACTF,KAAK,EACLI,IAAI,EACJI,YAAY,EACZE,QAAQ,EACRT,QAAQ,EACRI,OAAO,EACPE,WAAW,EACXE,eAAe,EACfN,YAAY,EACZQ,WAAW,EACXb,KAAK,CAACgB,YACV,CAAC,EAAEN,YAAY,CAAC;IAEhB,IAAKN,SAAS,KAAK,MAAM,EAAG;MACxBJ,KAAK,CAACgB,YAAY,CAACC,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IAClD;IACA,OAAO,MAAMC,aAAa,CAACJ,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACV,SAAS,EAAEF,KAAK,CAAC,CAAC;EAGtB,MAAMiB,cAAc,GAAGA,CAACC,YAAuB,EAAEC,CAAgB,KAAK;IAClEA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBjB,YAAY,CAAEkB,aAAa,IAAK;MAC5B,IACCA,aAAa,KAAK,IAAI,IAAIH,YAAY,KAAK,MAAM,IACjDG,aAAa,KAAK,MAAM,IAAIH,YAAY,KAAK,IAAK,IAClDG,aAAa,KAAK,MAAM,IAAIH,YAAY,KAAK,OAAQ,IACrDG,aAAa,KAAK,OAAO,IAAIH,YAAY,KAAK,MAAO,EACpD;QACF;QACA;QACA,OAAOG,aAAa;MACpB;MACA,OAAOH,YAAY;IACvB,CAAC,CAAC;IACF;EACJ,CAAC;EAED/B,MAAM,CAAC,SAAS,EAAMgC,CAAC,IAAKF,cAAc,CAAC,IAAI,EAAKE,CAAkB,CAAC,CAAC;EACxEhC,MAAM,CAAC,WAAW,EAAIgC,CAAC,IAAKF,cAAc,CAAC,MAAM,EAAGE,CAAkB,CAAC,CAAC;EACxEhC,MAAM,CAAC,WAAW,EAAIgC,CAAC,IAAKF,cAAc,CAAC,MAAM,EAAGE,CAAkB,CAAC,CAAC;EACxEhC,MAAM,CAAC,YAAY,EAAGgC,CAAC,IAAKF,cAAc,CAAC,OAAO,EAAEE,CAAkB,CAAC,CAAC;EAGxE,oBACIzB,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACI5B,OAAA;MACI6B,EAAE,EAAC;MACH;MAAA;MAAAD,QAAA,gBAEA5B,OAAA;QAAI6B,EAAE,EAAC,YAAY;QAAAD,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCjC,OAAA;QAAA4B,QAAA,GAEM,CAAChB,QAAQ,gBACPZ,OAAA,CAACN,UAAU;UAACY,KAAK,EAAEA,KAAM;UAACI,IAAI,EAAEA,IAAK;UAACF,SAAS,EAAEA;QAAU;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,gBAC7DjC,OAAA,CAACL,QAAQ;UACLkB,WAAW,EAAEA,WAAY;UACzBqB,OAAO,EAAE9B,KAAK,CAAC8B,OAAQ;UACvBC,SAAS,EAAE/B,KAAK,CAAC+B,SAAU;UAC3Bf,YAAY,EAAEhB,KAAK,CAACgB,YAAa;UACjCgB,QAAQ,EAAEhC,KAAK,CAACgC,QAAS;UACzBC,SAAS,EAAEjC,KAAK,CAACiC;QAAU;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9B,CAAC,eAENjC,OAAA;UAAA4B,QAAA,EAAIxB,KAAK,CAACiC;QAAS;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL;EAAC,gBACR,CAAC;AAEX,CAAC;AAAC5B,EAAA,CAjFIF,SAAS;EAAA,QAiDXV,MAAM,EACNA,MAAM,EACNA,MAAM,EACNA,MAAM;AAAA;AAAA6C,EAAA,GApDJnC,SAAS;AAoFf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}