{"ast":null,"code":"// export const gameover = false;\nexport const CELL_SIZE=20;export const initialSnake=[{x:Math.floor(CELL_SIZE/4),y:Math.floor(CELL_SIZE/2)}];export const generateFoodPosition=()=>{// let _x: number = Math.floor(Math.random() * CELL_SIZE) + 2;\n// let _y: number = Math.floor(Math.random() * CELL_SIZE) + 2;\nreturn{x:Math.floor(Math.random()*CELL_SIZE),y:Math.floor(Math.random()*CELL_SIZE)};};export const moveSnake=async(direction,snake,food,intervalTime,hitCount,setSnake,setFood,setGameOver,setIntervalTime,setDirection,setHitCount,setUserScore)=>{let newSnake=[...snake];let head={...newSnake[0]};switch(direction){case'UP':head.y-=1;break;case'DOWN':head.y+=1;break;case'LEFT':head.x-=1;break;case'RIGHT':head.x+=1;break;case'STOP':head.x=head.x;head.y=head.y;break;default:break;}if(head.x<0||head.y<0||head.x>=CELL_SIZE||head.y>=CELL_SIZE||newSnake.slice(1).some(body=>body.x===head.x&&body.y===head.y)){setDirection('STOP');setSnake(initialSnake);setIntervalTime(200);// setHitCount(0);\n// setUserScore(0);\nsetGameOver(true);return;}else if(direction!=='STOP'){setIntervalTime(prevInterval=>prevInterval-0.3);setUserScore(prevScore=>prevScore+1);}if(head.x===food.x&&head.y===food.y){newSnake.unshift({...head});setFood(generateFoodPosition());setHitCount(prevCount=>prevCount+1);setUserScore(prevScore=>prevScore+newSnake.length*10);if(intervalTime<40){setIntervalTime(40);}}else{newSnake.pop();}newSnake.unshift(head);setSnake(newSnake);};","map":{"version":3,"names":["CELL_SIZE","initialSnake","x","Math","floor","y","generateFoodPosition","random","moveSnake","direction","snake","food","intervalTime","hitCount","setSnake","setFood","setGameOver","setIntervalTime","setDirection","setHitCount","setUserScore","newSnake","head","slice","some","body","prevInterval","prevScore","unshift","prevCount","length","pop"],"sources":["C:/Users/藤澤 良祐/Downloads/研修/react-game/game/src/components/SnakeGame/utils/utils.ts"],"sourcesContent":["// export const gameover = false;\r\n\r\nexport const CELL_SIZE = 20;\r\n\r\nexport interface Position {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface Score {\r\n    id: number;\r\n    name: string;\r\n    score: number;\r\n    created_at: string;\r\n    ranking: number;\r\n}\r\n\r\nexport type Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT' | 'STOP';\r\n\r\nexport const initialSnake: Position[] = [{x: Math.floor(CELL_SIZE/4), y: Math.floor(CELL_SIZE/2) }];\r\n\r\nexport const generateFoodPosition = (): Position => {\r\n    \r\n    // let _x: number = Math.floor(Math.random() * CELL_SIZE) + 2;\r\n    // let _y: number = Math.floor(Math.random() * CELL_SIZE) + 2;\r\n    return {\r\n        x: Math.floor(Math.random() * CELL_SIZE),\r\n        y: Math.floor(Math.random() * CELL_SIZE)\r\n    };\r\n};\r\n\r\n\r\n\r\nexport const moveSnake = async(\r\n    direction:       Direction,\r\n    snake:           Position[],\r\n    food:            Position,\r\n    intervalTime:    number,\r\n    hitCount:        number, \r\n    setSnake:        React.Dispatch<React.SetStateAction<Position[]>>,\r\n    setFood:         React.Dispatch<React.SetStateAction<Position>>,\r\n    setGameOver:     React.Dispatch<React.SetStateAction<boolean>>,\r\n    setIntervalTime: React.Dispatch<React.SetStateAction<number>>,\r\n    setDirection:    React.Dispatch<React.SetStateAction<Direction>>,\r\n    setHitCount:     React.Dispatch<React.SetStateAction<number>>,\r\n    setUserScore:    React.Dispatch<React.SetStateAction<number>>,\r\n        \r\n  ) => {\r\n    let newSnake = [...snake];\r\n    let head = { ...newSnake[0] };\r\n    \r\n    switch (direction) {\r\n      case 'UP':\r\n        head.y -= 1;\r\n        break;\r\n      case 'DOWN':\r\n        head.y += 1;\r\n        break;\r\n      case 'LEFT':\r\n        head.x -= 1;\r\n        break;\r\n      case 'RIGHT':\r\n        head.x += 1;\r\n        break;\r\n      case 'STOP':\r\n        head.x = head.x;\r\n        head.y = head.y;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (head.x < 0 || \r\n        head.y < 0 || \r\n        head.x >= CELL_SIZE || \r\n        head.y >= CELL_SIZE ||\r\n        newSnake.slice(1).some((body) => body.x === head.x && body.y === head.y)  \r\n    ) {\r\n        setDirection('STOP');\r\n        setSnake(initialSnake);\r\n        setIntervalTime(200);\r\n        // setHitCount(0);\r\n        // setUserScore(0);\r\n        setGameOver(true);\r\n        return ;\r\n    }\r\n    else if ( direction !== 'STOP' ) {\r\n        setIntervalTime(prevInterval => prevInterval - 0.3);\r\n        setUserScore(prevScore => prevScore + 1);\r\n    }\r\n\r\n    if (head.x === food.x && head.y === food.y) {\r\n        newSnake.unshift({ ...head });\r\n        setFood(generateFoodPosition());\r\n        setHitCount(prevCount => prevCount + 1);\r\n\r\n        setUserScore(prevScore => prevScore + (newSnake.length * 10));\r\n\r\n        if(intervalTime < 40 ) {\r\n          setIntervalTime(40);\r\n        }\r\n    } \r\n    else {\r\n        newSnake.pop();\r\n    }\r\n\r\n    newSnake.unshift(head);\r\n    setSnake(newSnake);\r\n\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}